// Code generated by Thrift Compiler (0.16.0). DO NOT EDIT.

package rpc

import (
	"bytes"
	"context"
	"fmt"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"time"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

// Attributes:
//   - UserId
//   - GroupId
//   - Amount
//   - Number
//   - BizOutNo
type SendRpReq struct {
	UserId   string `thrift:"userId,1,required" db:"userId" json:"userId"`
	GroupId  string `thrift:"groupId,2,required" db:"groupId" json:"groupId"`
	Amount   int64  `thrift:"amount,3,required" db:"amount" json:"amount"`
	Number   int64  `thrift:"number,4,required" db:"number" json:"number"`
	BizOutNo string `thrift:"bizOutNo,5,required" db:"bizOutNo" json:"bizOutNo"`
}

func NewSendRpReq() *SendRpReq {
	return &SendRpReq{}
}

func (p *SendRpReq) GetUserId() string {
	return p.UserId
}

func (p *SendRpReq) GetGroupId() string {
	return p.GroupId
}

func (p *SendRpReq) GetAmount() int64 {
	return p.Amount
}

func (p *SendRpReq) GetNumber() int64 {
	return p.Number
}

func (p *SendRpReq) GetBizOutNo() string {
	return p.BizOutNo
}
func (p *SendRpReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetUserId bool = false
	var issetGroupId bool = false
	var issetAmount bool = false
	var issetNumber bool = false
	var issetBizOutNo bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetUserId = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetGroupId = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetAmount = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetNumber = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
				issetBizOutNo = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetUserId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserId is not set"))
	}
	if !issetGroupId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GroupId is not set"))
	}
	if !issetAmount {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Amount is not set"))
	}
	if !issetNumber {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Number is not set"))
	}
	if !issetBizOutNo {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BizOutNo is not set"))
	}
	return nil
}

func (p *SendRpReq) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *SendRpReq) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *SendRpReq) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Amount = v
	}
	return nil
}

func (p *SendRpReq) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Number = v
	}
	return nil
}

func (p *SendRpReq) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.BizOutNo = v
	}
	return nil
}

func (p *SendRpReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SendRpReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SendRpReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "userId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *SendRpReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "groupId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err)
	}
	return err
}

func (p *SendRpReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "amount", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:amount: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Amount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.amount (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:amount: ", p), err)
	}
	return err
}

func (p *SendRpReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "number", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:number: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Number)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.number (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:number: ", p), err)
	}
	return err
}

func (p *SendRpReq) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "bizOutNo", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:bizOutNo: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.BizOutNo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bizOutNo (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:bizOutNo: ", p), err)
	}
	return err
}

func (p *SendRpReq) Equals(other *SendRpReq) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.UserId != other.UserId {
		return false
	}
	if p.GroupId != other.GroupId {
		return false
	}
	if p.Amount != other.Amount {
		return false
	}
	if p.Number != other.Number {
		return false
	}
	if p.BizOutNo != other.BizOutNo {
		return false
	}
	return true
}

func (p *SendRpReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendRpReq(%+v)", *p)
}

// Attributes:
//   - RpId
//   - ErrCode
//   - ErrMsg
type SendRpResp struct {
	RpId    string `thrift:"rpId,1,required" db:"rpId" json:"rpId"`
	ErrCode int64  `thrift:"errCode,2,required" db:"errCode" json:"errCode"`
	ErrMsg  string `thrift:"errMsg,3,required" db:"errMsg" json:"errMsg"`
}

func NewSendRpResp() *SendRpResp {
	return &SendRpResp{}
}

func (p *SendRpResp) GetRpId() string {
	return p.RpId
}

func (p *SendRpResp) GetErrCode() int64 {
	return p.ErrCode
}

func (p *SendRpResp) GetErrMsg() string {
	return p.ErrMsg
}
func (p *SendRpResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetRpId bool = false
	var issetErrCode bool = false
	var issetErrMsg bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetRpId = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetErrCode = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetErrMsg = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetRpId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RpId is not set"))
	}
	if !issetErrCode {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrCode is not set"))
	}
	if !issetErrMsg {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrMsg is not set"))
	}
	return nil
}

func (p *SendRpResp) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.RpId = v
	}
	return nil
}

func (p *SendRpResp) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ErrCode = v
	}
	return nil
}

func (p *SendRpResp) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ErrMsg = v
	}
	return nil
}

func (p *SendRpResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SendRpResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SendRpResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "rpId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rpId: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.RpId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rpId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rpId: ", p), err)
	}
	return err
}

func (p *SendRpResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "errCode", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errCode: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.ErrCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.errCode (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errCode: ", p), err)
	}
	return err
}

func (p *SendRpResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "errMsg", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:errMsg: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ErrMsg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.errMsg (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:errMsg: ", p), err)
	}
	return err
}

func (p *SendRpResp) Equals(other *SendRpResp) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.RpId != other.RpId {
		return false
	}
	if p.ErrCode != other.ErrCode {
		return false
	}
	if p.ErrMsg != other.ErrMsg {
		return false
	}
	return true
}

func (p *SendRpResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendRpResp(%+v)", *p)
}

type RedPacketService interface {
	// Parameters:
	//  - Req
	SendRp(ctx context.Context, req *SendRpReq) (_r *SendRpResp, _err error)
}

type RedPacketServiceClient struct {
	c    thrift.TClient
	meta thrift.ResponseMeta
}

func NewRedPacketServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RedPacketServiceClient {
	return &RedPacketServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewRedPacketServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RedPacketServiceClient {
	return &RedPacketServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewRedPacketServiceClient(c thrift.TClient) *RedPacketServiceClient {
	return &RedPacketServiceClient{
		c: c,
	}
}

func (p *RedPacketServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *RedPacketServiceClient) LastResponseMeta_() thrift.ResponseMeta {
	return p.meta
}

func (p *RedPacketServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
	p.meta = meta
}

// Parameters:
//   - Req
func (p *RedPacketServiceClient) SendRp(ctx context.Context, req *SendRpReq) (_r *SendRpResp, _err error) {
	var _args0 RedPacketServiceSendRpArgs
	_args0.Req = req
	var _result2 RedPacketServiceSendRpResult
	var _meta1 thrift.ResponseMeta
	_meta1, _err = p.Client_().Call(ctx, "SendRp", &_args0, &_result2)
	p.SetLastResponseMeta_(_meta1)
	if _err != nil {
		return
	}
	if _ret3 := _result2.GetSuccess(); _ret3 != nil {
		return _ret3, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "SendRp failed: unknown result")
}

type RedPacketServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      RedPacketService
}

func (p *RedPacketServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *RedPacketServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *RedPacketServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewRedPacketServiceProcessor(handler RedPacketService) *RedPacketServiceProcessor {

	self4 := &RedPacketServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self4.processorMap["SendRp"] = &redPacketServiceProcessorSendRp{handler: handler}
	return self4
}

func (p *RedPacketServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
	if err2 != nil {
		return false, thrift.WrapTException(err2)
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(ctx, thrift.STRUCT)
	iprot.ReadMessageEnd(ctx)
	x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
	x5.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return false, x5

}

type redPacketServiceProcessorSendRp struct {
	handler RedPacketService
}

func (p *redPacketServiceProcessorSendRp) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RedPacketServiceSendRpArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "SendRp", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := RedPacketServiceSendRpResult{}
	var retval *SendRpResp
	if retval, err2 = p.handler.SendRp(ctx, args.Req); err2 != nil {
		tickerCancel()
		if err2 == thrift.ErrAbandonRequest {
			return false, thrift.WrapTException(err2)
		}
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SendRp: "+err2.Error())
		oprot.WriteMessageBegin(ctx, "SendRp", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return true, thrift.WrapTException(err2)
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "SendRp", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//   - Req
type RedPacketServiceSendRpArgs struct {
	Req *SendRpReq `thrift:"req,1" db:"req" json:"req"`
}

func NewRedPacketServiceSendRpArgs() *RedPacketServiceSendRpArgs {
	return &RedPacketServiceSendRpArgs{}
}

var RedPacketServiceSendRpArgs_Req_DEFAULT *SendRpReq

func (p *RedPacketServiceSendRpArgs) GetReq() *SendRpReq {
	if !p.IsSetReq() {
		return RedPacketServiceSendRpArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RedPacketServiceSendRpArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RedPacketServiceSendRpArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RedPacketServiceSendRpArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Req = &SendRpReq{}
	if err := p.Req.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *RedPacketServiceSendRpArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SendRp_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RedPacketServiceSendRpArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *RedPacketServiceSendRpArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RedPacketServiceSendRpArgs(%+v)", *p)
}

// Attributes:
//   - Success
type RedPacketServiceSendRpResult struct {
	Success *SendRpResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRedPacketServiceSendRpResult() *RedPacketServiceSendRpResult {
	return &RedPacketServiceSendRpResult{}
}

var RedPacketServiceSendRpResult_Success_DEFAULT *SendRpResp

func (p *RedPacketServiceSendRpResult) GetSuccess() *SendRpResp {
	if !p.IsSetSuccess() {
		return RedPacketServiceSendRpResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RedPacketServiceSendRpResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RedPacketServiceSendRpResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RedPacketServiceSendRpResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &SendRpResp{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *RedPacketServiceSendRpResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SendRp_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RedPacketServiceSendRpResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RedPacketServiceSendRpResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RedPacketServiceSendRpResult(%+v)", *p)
}
